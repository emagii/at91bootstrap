#!/bin/sh

# Support Ubuntu ARM C compiler
export	CROSS_COMPILE=/usr/bin/arm-linux-gnueabi-

init_make ()
{
	rm	-f	binaries/*
	rm	-rf	log
	rm	-fr	result

	mkdir	-p	log
	mkdir	-p	result/FAIL
	mkdir	-p	result/OK
	mkdir	-p	result/binaries
	mkdir	-p	result
	mkdir	-p	result/map
	mkdir	-p	result/elf

	source	./mk-config-list.sh
}

build ()
{
	printf	"%-30s"	"$1"
	make -s distclean > /dev/null
	make -j 8 -s $1_defconfig > /dev/null
	sts=0
	make -j 8 > log/$1.log 2>&1 3>log/$1.info	|| sts=1
	if [ $sts == 0 ] ; then
		mv log/$1.log result/OK/$1.log.OK
		working=`expr $working + 1`
		printf	"[OK]"
		# "arning" supports English and Swedish !
		warning_lines=`cat result/OK/$1.log.OK | grep arning | wc -l`
		if ! [ $warning_lines == 0 ] ; then
			printf "[Warnings]"
		fi
		echo
	else
		mv log/$1.log result/FAIL/$1.log.FAIL
		failing=`expr $failing + 1`
		echo	"[FAIL]"
	fi
	mv binaries/*.elf	result/elf
	mv binaries/*.map	result/map
	mv binaries/*.bin	result/binaries
}

build_all ()
{
	failing=0;
	working=0;
	for f in `cat $CONFIG_LIST` ; do
		build	$f
	done
	printf	"%s\n"	"------------------------------------"
	total=`expr	$working + $failing`
	printf	"%-30s[%d]\n"	"Number of Boards:"	$total
	printf	"\n"
	printf	"%-30s[%d]\n"	"Working Boards:"	$working
	printf	"%-30s[%d]\n"	"Failing Boards:"	$failing
}

init_make

time	build_all

echo
echo
echo "### Done!"

